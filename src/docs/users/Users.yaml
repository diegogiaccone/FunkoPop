

paths:
  /users:
    # En cada una agregamos los métodos habilitados según users.router.js
    # Este es el método get que no recibe parámetros para retornar todos los usuarios
    get:
      summary: Retorna la lista completa de usuarios
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'

  # Notar el uso de llaves para indicar el parámetro {id}
  /users/{id}:
    # Este es el método get que sí recibe parámetro para retornar un usuario específico
    get:
      summary: Retorna los detalles del usuario especificado
      tags:
        - Users
      # Si el endpoint utiliza parámetros, debemos tener una sección parameters aquí
      parameters:
        - name: uid
          in: path
          required: false
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
    
    put:
      summary: Recibe un body para modificar un el usuario
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Esta referencia permite indicar la lista de campos que se deberían
              # enviar en el body al contactar a este endpoint (ver requestBodies más abajo)
              $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: 'ERROR'
    
    delete:
      summary: Borra el usuario con el id indicado
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: Mongoose ObjectID
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: 'ERROR'
  /updatepass:    
    get:
      summary: Retorna el formulario para cambiar la contraseña
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
    post:
      summary: toma el usuario de la session y por medio de un formulario cambia la contraseña recibida por body si cumple con las validaciones necesarias
      tags:
        - Users
      parameters:
        - user: req.body.user
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Esta referencia permite indicar la lista de campos que se deberían
              # enviar en el body al contactar a este endpoint (ver requestBodies más abajo)
              $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: 'ERROR'
  /messages:    
    get:
      summary: Retorna una respuesta de envio de email con link para recuperacion de contraseña
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
  /errmessages:    
    get:
      summary: Retorna una respuesta indicando que el mail ingresado para la recuperacion de contraseña no se encuentra en la base de datos
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
  /recovery:    
    get:
      summary: Retorna el formulario para ingresar el email de recuperacion de contraseña
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
    post:
      summary: Recibe un body con el email del usuario y envia por mail un token el cual tiene validez por 1h y lo guarda en el usuario para reestablecer las contraseñas olvidadas
      tags:
        - Users
      parameters:
        - user: req.body.user
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Esta referencia permite indicar la lista de campos que se deberían
              # enviar en el body al contactar a este endpoint (ver requestBodies más abajo)
              $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: 'ERROR'
  /recoverypass/mailequal:    
    get:
      summary: Retorna un mensaje que indica que la contraseña reestablecida no puede ser igual a la anterior
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
  /recoverypass/passequal:    
    get:
      summary: Retorna un mensaje que indica que las contraseñas deben ser iguales en ambos campos para reestablecerla
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
  /recoverypass/success:    
    get:
      summary: Retorna un mensaje que indica que la contraseña fue reestablecida correctamente
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
  /recoverypass/{token}:    
    get:
      summary: Retorna el formulario para el reestablecimiento de contraseña tomado como parametro el token generado y enviado al email
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
    post:
      summary: recibe por params el token enviado al email en un link para el reestablecimiento de contraseña, ya que este token fue guardado en el usuario encuentra el usuario y con un formulario reestablece la contraseña si cumple con las validaciones correspondientes
      tags:
        - Users
      parameters:
        - user: req.body.user
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Esta referencia permite indicar la lista de campos que se deberían
              # enviar en el body al contactar a este endpoint (ver requestBodies más abajo)
              $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: 'ERROR'
  /fakeuser:    
    get:
      summary: Retorna una lista de usarios de faker (falsos) endpoint unicamente para testing
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
  /updateavatar:    
    get:
      summary: Retorna un formulario para cambiar la imagen del avatar del usuario
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
    post:
      summary: toma el usuario de la session y por medio de un formulario cambia la imagen del avatar subida por una URL
      tags:
        - Users
      parameters:
        - user: req.body.user
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Esta referencia permite indicar la lista de campos que se deberían
              # enviar en el body al contactar a este endpoint (ver requestBodies más abajo)
              $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: 'ERROR'
  /register:    
    get:
      summary: Retorna un formulario para el registro de un nuevo usuario
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
    post:
      summary: guarda en la base de datos un nuevo usuario con los datos tomados por body por medio de un formulario 
      tags:
        - Users
      parameters:
        - user: req.body.user
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Esta referencia permite indicar la lista de campos que se deberían
              # enviar en el body al contactar a este endpoint (ver requestBodies más abajo)
              $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: 'ERROR'
  /rol:    
    get:
      summary: Retorna un formulario para la asignacion de roles a los diferentes usuarios, este endopoint solo esta disponible para los ADMIN
      # Este título encabezará la lista
      tags:
        - Users
      # Es importante agregar esta sección de códigos de respuesta
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  # Esta línea hace referencia al esquema de User (tomado desde el modelo de Mongoose)
                  # Se puede ver el esquema indicado más abajo, en components
                  $ref: '#/components/schemas/users'
        "500":
          description: 'ERROR'
    post:
      summary: Recibe por body el email del usuario y le asigna un rol al usuario indicado mediante un formulario select de roles, (solo habilitado para ADMIN)
      tags:
        - Users
      parameters:
        - user: req.body.user
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Esta referencia permite indicar la lista de campos que se deberían
              # enviar en el body al contactar a este endpoint (ver requestBodies más abajo)
              $ref: '#/components/requestBodies/updateUser'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "500":
          description: 'ERROR'

components:
  schemas:
    # Este esquema se coloca separado acá, para poder referenciarlo en distintos
    # endpoints arriba
    users:
      type: object
      properties:
        _id:
          type: object
          description: Mongoose ObjectID
        name:
          type: string
        apellido:
          type: string
        user:
          type: string
        pass:
          type: string
          description: Clave HASHEADA
        avatar: 
          type: string
        token: 
          type: string
        rol:           
            type: Mongoose ObjectID
        cart:           
            type: Mongoose ObjectID
        ticket:           
            type: Mongoose ObjectID          

      # Siempre es útil un ejemplo, también pueden colocarse ejemplos específicos por endpoint arriba
      example:      
        _id: 64b5ed9bf208b01b93fbd51f
        name: "Benjamin"
        apellido: "Giaccone"
        user: "diego_fg91@hotmail.com"
        pass: "$2a$08$ezSpFIihfjwEvGdMtkgoeOFbCAWcwkkAmJT4bEDJOudIzqfoFmjb."
        avatar: "https://avatars.githubusercontent.com/u/113393396?v=4"
        rol: 64b5ed9bf208b01b93fbdgte
        cart: 64b5ed9bf208b01b93fbddsa
        ticket: 64b5ed9bf208b01b93fbdjui
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6IjFkNDg4MTE2OWQwYTA3Z…"     

  # Cuál es la diferencia entre schemas y requestBodies?
  # schemas permite indicar esquemas completos, requestBodies indica los campos
  # que debería adjuntar una determinada solicitud (en este caso updateUser)
  requestBodies:
    updateUser:
      type: object
      properties:
        name:
          type: string
        apellido:
          type: string
        user:
          type: string
        pass:
          type: string
          description: Clave HASHEADA
        avatar: 
          type: string        
        rol:          
            type: Mongoose ObjectID